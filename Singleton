Description:单例设计模式：
 * 在某个类的整个系统中只能有一个实例对象可以被获取和使用的代码模式
 * 例如：代表JVM运行环境的RunTime类，把整个jvm运行环境当作一个对象
 
 要点：
 1.某个类只能有一个实例：构造器私有化
 2.必须自行创建这个实例：含有一个该类的静态变量来保存这个唯一的实例
 3.必须自行向整个系统提供这个实例
  （a）直接暴漏（b）用静态变量的get方法获取
  
几种创建方式：饿汉式：直接创建对象。
            懒汉式：延迟创建对象
            
            
            
 ----------------------------------------------------------------------------
 package JavaSE;

/**
 * ClassName: Singleton1
 * Company:华中科技大学电气学院
 * date: 2019/7/1 16:54
 * author： YEXIN
 * version： 1.0
 * since： JDK 1.8
 * Description:单例设计模式：
 * 在某个类的整个系统中只能有一个实例对象可以被获取和使用的代码模式
 * 例如：代表JVM运行环境的RunTime类，把整个jvm运行环境当作一个对象
 *
 */

/**饿汉式：在类初始化时直接创建实例对象，不管你是否需要这个对象,不存在线程安全问题。
 * 步骤：
 * （1）构造器私有化
 * （2）自行创建，并用静态变量保存
 * （3）向外提供这个实例
 * （4）final修改，强调这个是单例
 */
public class Singleton1 {

    //public表示向外提供这个实例
    //static表示是类的静态变量
    //在调用这个类的其他方法时，该类也会加载，由于static修饰，所以会实例化对象
    public static final Singleton1 INSTANCE = new Singleton1();

    private Singleton1(){

    }
}
--------------------------------------------------------------------------------
package JavaSE;

/**
 * ClassName: Singleton2
 * Company:华中科技大学电气学院
 * date: 2019/7/1 17:19
 * author： YEXIN
 * version： 1.0
 * since： JDK 1.8
 * Description:利用枚举类型创建单例
 * 枚举类型：表示该类型的对象是有限个
 * 我们可以定义为一个，就成了单例
 */
//饿汉式之枚举方式
public enum Singleton2 {
    INSTABNCE
}
-------------------------------------------------------------------------------
package JavaSE;

import java.io.IOException;
import java.util.Properties;

/**
 * ClassName: TestSingleton3
 * Company:华中科技大学电气学院
 * date: 2019/7/1 17:31
 * author： YEXIN
 * version： 1.0
 * since： JDK 1.8
 * Description:饿汉式：通过静态模块来创建单例模式
 * 适用于用复杂的对象创建，比如读取某个文件的信息来创建：有参构造对象
 */
public class Singleton3 {
    public static final Singleton3 INSTANCS;


    @Override
    public String toString() {
        return "TestSingleton3{" +
                "info='" + info + '\'' +
                '}';
    }

    private String info;
    public String getInfo() {
        return info;
    }

    public void setInfo(String info) {
        this.info = info;
    }

    //在代码块里初始化对象
    static {

        try {
            Properties pro = new Properties();//利用该类读取配置文件，配置在src下才可以用类加载器加载。
            pro.load(Singleton3.class.getClassLoader().getResourceAsStream("single.properties"));

            INSTANCS = new Singleton3(pro.getProperty("info"));//根据配置文件获取参数，方便后期修改，不用动源代码
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private Singleton3(String info){
        this.info = info;
    }
}
------------------------------------------------------------------------------------------------------------
package JavaSE;

/**
 * ClassName: Singleton4
 * Company:华中科技大学电气学院
 * date: 2019/7/1 18:41
 * author： YEXIN
 * version： 1.0
 * since： JDK 1.8
 * Description:懒汉式创建单例对象，通过内部类实现线程安全
 *
 * 在内部类被加载和初始化时才创建INSTANCE实例对象
 * 静态内部类不会自动随着外部类加载和初始化而初始化，需要单独去加载和初始化
 * 因为在内部类加载和初始化，创建的，因此是线程安全的。
 */
public class Singleton4 {
    private Singleton4(){

    }

    private static class Inner{
        private static final Singleton4 INSTANCE = new Singleton4();
    }

    public static Singleton4 getInstance(){
        return Inner.INSTANCE;
    }
}
-----------------------------------------------------------------------------------------------
package JavaSE;

/**
 * ClassName: Singleton5
 * Company:华中科技大学电气学院
 * date: 2019/7/1 18:46
 * author： YEXIN
 * version： 1.0
 * since： JDK 1.8
 * Description:懒汉式创建单例对象
 *     延迟创建这个对象
 *
 *     （1）构造器私有化
 *     （2）用静态变量保存这个唯一的实例
 *     （3）提供一个静态方法，获取这个实例
 */
public class Singleton5 {
    private static Singleton5 instance;
    private Singleton5(){

    }

    public static Singleton5 getInstance(){
        if(instance == null){
            synchronized (Singleton5.class){//加锁保证线程安全
                if(instance == null){
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    instance = new Singleton5();
                }
            }
        }
        return instance;
    }

}
------------------------------------------------------------------------------------------------------------
以上便是创建单例模式的几种例子。
