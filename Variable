就近原则

变量的分类：
   成员变量：类变量，实例变量
   局部变量

   由声明的位置定：
       局部变量：在方法体{}中，形参，代码块{}中
       成员变量：类中方法外，有初始默认值
           类变量：有static修饰
           实例变量：没有static修饰

    修饰符：
       局部变量：final
       成员变量：public，protected，private，final，static，volatile，transient

    值存储位置：
       局部变量：栈
       实例变量：堆，所有对象实例及数组都在堆上分配
       类变量：方法区


   作用域：
      局部变量：从声明处开始，到所属的}结束

      实例变量：在当前类中this.  ，在其他类中的 “对象名.”访问
      类变量：在当前类中类名.  ，在其他类中的 “类名.”或“对象名.”访问


   声明周期：
     局部变量：每一个线程，每一次调用执行都是新的声明周期
     实例变量：随着对象的创建而初始化，随着对象的回收而被消亡。每个对象的实例变量是独立的
     类变量：随着类的初始化而初始化，随着类的卸载而被消亡。每个对象共享类变量

非静态代码块：每次创建实例对象都会执行

方法的调用规则：调用一次执行一次


当局部变量和XX变量重名时如何区分：
    局部变量和实例变量重名：在实例变量前加“this.”
    局部变量和类变量重名：在类前面加“类名.”
===========================================================================================
package JavaSE.variable;

/**
 * ClassName: Exam
 * Company:华中科技大学电气学院
 * date: 2019/7/2 10:13
 * author： YEXIN
 * version： 1.0
 * since： JDK 1.8
 * Description:成员变量和局部变量
 */
public class Exam {
    static int s;//成员变量。类变量
    int i;//成员变量，实例变量
    int j;//成员变量,实例变量
    {
        int i = 1;//非静态代码块中的局部变量
        i++;
        j++;
        s++;
    }
    public void test(int j){//形参局部变量j
        j++;//局部变量
        i++;//局部变量
        s++;//局部变量
    }

    public static void main(String[] args) {
        //局部变量obj1在java栈中【栈为每个方法再分配独有的一块区域】,右边的是实例，在堆中，obj1是对象实例的引用
        Exam obj1 = new Exam();
        Exam obj2 = new Exam();//局部变量obj2,实例化对象时会调用非静态代码块【通过init<>】,完成后在栈中为方法分配的区域就移除了

        obj1.test(10);
        obj1.test(20);
        obj2.test(30);
        System.out.println(obj1.i+"--"+obj1.j+"--"+obj1.s);
        System.out.println(obj2.i+"--"+obj2.j+"--"+obj2.s);
    }
}
-------------------------------------------------------------------------------------------------------------------
结果：
2--1--5
1--1--5



